# -*- coding: utf-8 -*-
"""dicoding-submission MLT Sistem Rekomendasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzs8kpikFQ9hGoy0QwqmlC5JPd9SWzO6

# Download Dataset
"""

!pip install kaggle
from google.colab import files
files.upload()
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d shivamb/netflix-shows
!unzip netflix-shows.zip

"""# Import Required Library"""

import numpy as np 
import pandas as pd
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# Data Understanding
Dataset berisi daftar film dan rinciannya seperti tahun dirilis, waktu durasi, deskripsi dll.
"""

data = pd.read_csv('netflix_titles.csv')
data.head()

"""Dari table diatas berikut penjelasan masing-masing fitur pada data:
*   title, merupakan judul film.
*   show_id, berisi id penayangan.
*   type, merupakan jenis film (Movie/Tv Show).
*   director, berisi nama penanggungjawab program/film.
*   cast, daftar pemeran yang bermain dalam film.
*   country, daerah asal film diproduksi.
*   date_added, tanggal film di masukkan ke dalam dataset.
*   release_year, tahun film rilis.
*   rating, kategori rating usia yang diperbolehkan menonton film tersebut.
*   duration, durasi waktu film dari awal hingga selesai.
*   listed_in, berisi kategori film.
*   description, merupakan deskripsi atau sinopsis film.
"""

# Mengecek jumlah baris dan kolom dataset
data.shape

"""Dataset ini memiliki 8870 baris dan 12 kolom"""

# Cek daftar type film
data.type.unique()

"""
### Melihat Distribusi Rating"""

plt.figure(figsize=(15,10))
sns.set(style="white")
ax = sns.countplot(x="rating", data=data, palette="Set2", order=data['rating'].value_counts().index[0:15])

"""Dengan countplot rating ini dapat diketahui bahwa konten TV-MA (Mature Audiences) memiliki angka rating tertinggi. Kemudian menjadi lebih rendah seperti TV-14 (Materi yang mungkin dianggap tidak cocok oleh orang tua atau wali dewasa untuk anak di bawah usia 14 tahun) dan TV-PG (Panduan Orang Tua

### Melihat Distribusi Tahun Rilis
"""

plt.figure(figsize=(20,12))
sns.set(style="dark")
ax = sns.countplot(y="release_year", data=data, palette="bright", order=data['release_year'].value_counts().index[0:15])

"""Plot ini menunjukkan bahwa sebagian besar konten diproduksi pada tahun 2018 dan 2017. Fakta yang menarik adalah pada tahun 2019, 2020 dan 2021 jumlah konten yang diproduksi sedikit. Ini sebagian besar karena pandemi Covid-19

# Data Preparation
"""

data.info()

# Cek missing value
data.isnull().sum()

"""Dari hasil pengecekan terdapat banyak missing value pada dataset kolom director, cast, country, date_added, rating, dan duration

Pada proses pembuatan sistem rekomendasi yang diperlukan hanyalah kolom judul dan rating sehingga kita bisa membuat data baru yang berisi kolom rating dan judul film saja.
"""

# Drop Columns 
df = data[['title','rating']]

# Drop the rest
df.dropna(inplace=True)

# Cek missing value
df.isnull().sum()

"""Hasil diatas menunjukkan data sudah tidak memiliki missing value/null"""

df.rating.unique()

"""pada kolom rating terdapat beberapa kategori yang cukup aneh yaitu '74 min', '84 min', '66 min', karena itu mari kita lihat film apa saja yang termasuk kategori rating tersebut"""

data[data.rating.apply(lambda x: x in ['74 min', '84 min', '66 min'])]

"""Dari hasil pengecekan hanya terdapat 3 baris data untuk kategori rating '74 min', '84 min', '66 min'. Mengacu pada laman netflix, film dengan judul Louis C.K. memiliki maturity rating TV-MA. Sehingga kita bisa melakukan replace dengan rating tersebut"""

df['rating'] = df.rating.apply(lambda x: 'TV-MA' if x in ['74 min', '84 min', '66 min'] else x)
df.rating.unique()

"""Sekarang seluruh data rating telah memiliki kategori yang sesuai. Selanjutnya untuk mempermudah kita akan mengelompokkan beberapa kategori rating maturity menjadi 4 kategori saja yakni  ‘Adults’, ‘Teens’, ‘Older Kids’, ‘Kids’"""

ratings_ages = {
    'TV-PG': 'Older Kids',
    'TV-MA': 'Adults',
    'TV-Y7-FV': 'Older Kids',
    'TV-Y7': 'Older Kids',
    'TV-14': 'Teens',
    'R': 'Adults',
    'TV-Y': 'Kids',
    'NR': 'Adults',
    'PG-13': 'Teens',
    'PG': 'Teens',
    'TV-G': 'Kids',
    'PG': 'Older Kids',
    'G': 'Kids',
    'UR': 'Adults',
    'NC-17': 'Adults'
}
# Replace Rating values with age targets, they are based on
df['rating'] = df['rating'].replace(ratings_ages)
df.rating.unique()

"""# Model Development"""

df.sample(5)

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer(stop_words='english')
 
# Melakukan perhitungan idf pada data rating
tf.fit(df.rating) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(df.rating) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""Hasil transformasi menghasilkan matriks berukuran (8803, 4). Nilai 8803 merupakan ukuran data dan 4 merupakan matriks naturity rating film."""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan kategori maturity rating
# Baris diisi dengan judul film
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=df.title
).sample(4, axis=1).sample(10, axis=0)

"""Data diatas menunjukkan film **FirstBorn** memiliki rating adults, film **Okupas** memiliki raitng adult, dan seterusnya

### Cosine Similarity
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa judul film
cosine_sim_df = pd.DataFrame(cosine_sim, index=df.title, columns=df.title)
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap film
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Output tabel diatas menunjukkan bahwa film **The Open House** memiliki kemiripan dengan film **The Occupant** , film **Momo Salon** memiliki kemiripan dengan film **Phullu**, dan seterusnya

### Mendapatkan Rekomendasi
"""

def film_recommendations(nama_film, similarity_data=cosine_sim_df, items=df[['title', 'rating']], k=10):
    """
    Rekomendasi film berdasarkan kemiripan dataframe
 
    Parameter:
    ---
    nama_film : tipe data string (str)
                Nama filmran (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan film sebagai 
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---
 
 
    Pada index ini, kita mengambil k dengan nilai similarity terbesar 
    pada index matrix yang diberikan (i).
    """
 
 
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_film].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_film agar nama film yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_film, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

df.sample()

recommendation = film_recommendations("Bullitt County")
recommendation

"""### Evaluation"""

precission = recommendation[recommendation.rating.eq("Adults")].shape[0]//recommendation.shape[0]
print(f"[+] Precission: {precission*100}%")